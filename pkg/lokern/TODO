  o plot.lokern() in ~/Vorl/WBL-Nonpar_Regr/R/lokerns-ex.R   allows to plot __bandwidth__ h
    ------------  *BUT* it shadows the plot.KernS()  method in the package
                                       ~~~~~~~~~~~~
    ==> define plot.lokerns()  and it *calls* plot.KernS() but additionally *optionally*  visualizes the bandwidth

  o Now both lokerns() and glkerns()  do return class()ed results which
    have  print(), residuals(), ... methods.

    Both now also use
    	sfsmisc::seqXtend() {-> sfsmisc:roundfixS() }
	    --> dependency on  sfsmisc
	        [[Alternative:  Write small paper on  seqXtend() & roundfixS()
                    and move these to  utils ]]

  o The Fortran-algorithm  in parts heavily relies on   t_i < t_{i+1}
    When we have *duplicated* x's  [or "nearly-duplicated" ones which may
    be even more subtle ! --- there maybe numerical problems that we should
    deal with.
    The smooth.spline() - like solution requires an algorithm that works
    with *weights*  ... and that maybe much too much work, needing more
    theoretical work, first !

  o Both functions now return lists almost identical;
    this is nice and useful.

  o The 2 man pages look very similar;  ``clean up''


Done:
=====
  o the nice plots in tests/glk1.R  now in  demo/glk-derivs.R

  o User [R.V.]: glkerns() and lokerns() should return an object for which I can
    predict(*,  deriv = d,...)  {d = 0, 1, 2, ..}
    		^^^^^^^^^     .. however that would require that
      "nu - k" := deriv - korder  could be non-even etc
    --> Would need more "research"; see comment in src/glkerns.f

  o plot(.) method works, also when object had deriv=1,..

  o residuals() and fitted() give an error correctly, when 'x.out' is not
      ok, i.e. (gl|lok)kerns(..)  did not include  x.inOut = TRUE {which
      however is default, so the user should know what he is doing...}

